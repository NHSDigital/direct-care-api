AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template deploys a CodePipeline with its required resources.

  The following stages are predefined in this template:
  - Source
  - UpdatePipeline
  - BuildAndDeployFeatureStack (FeatureGitBranch only)
  - BuildAndPackage (MainGitBranch only)
  - DeployTest (MainGitBranch only)
  - DeployProd (MainGitBranch only)

  **WARNING** You will be billed for the AWS resources used if you create a stack from this template.

# To deploy this template and connect to the main git branch, run this against the leading account:
# `sam deploy -t codepipeline.yaml --stack-name <stack-name> --capabilities=CAPABILITY_IAM`.
# After creating the stack, the CodeStar Connection is in PENDING status by default. You must complete
# the OAuth handshake with the third-party provider using the installation associated with your connection.
# See https://docs.aws.amazon.com/dtconsole/latest/userguide/connections-update.html for instructions.

# If later you need to deploy a new CodePipeline to connect to a non-main git branch, run
# ```
# sam deploy -t codepipeline.yaml --stack-name <stack-name> --capabilities=CAPABILITY_IAM \
#   --parameter-overrides="FeatureGitBranch=<branch-name> CodeStarConnectionArn=<codestar-connection-arn>"
# ```

Parameters:
  GitProviderType:
    Type: String
    Default: "GitHub"
  FullRepositoryId:
    Type: String
    Default: "NHSDigital/direct-care-api"
  MainGitBranch:
    Type: String
    Default: "sam_deployment"
  SamTemplate:
    Type: String
    Default: "template.yaml"
  TestingRegion:
    Type: String
    Default: "eu-west-2"
  TestingStackName:
    Type: String
  TestingPipelineExecutionRole:
    Type: String
  TestingCloudFormationExecutionRole:
    Type: String
  TestingArtifactBucket:
    Type: String
  TestingImageRepository:
    Type: String
    # If there are functions with "Image" PackageType in your template,
    # Update the line below with image repository URL and add "--image-repository ${TESTING_IMAGE_REPOSITORY}" to
    # prod "sam package" and "sam deploy" commands in buildspec files (in pipeline/).
    Default: ""
  ProdRegion:
    Type: String
    Default: "eu-west-2"
  ProdStackName:
    Type: String
    Default: "direct-care-api"
  ProdPipelineExecutionRole:
    Type: String
  ProdCloudFormationExecutionExeRole:
    Type: String
  ProdArtifactBucket:
    Type: String
  ProdImageRepository:
    Type: String
    # If there are functions with "Image" PackageType in your template,
    # Update the line below with image repository URL and add "--image-repository ${PROD_IMAGE_REPOSITORY}" to
    # prod "sam package" and "sam deploy" commands in buildspec files (in pipeline/).
    Default: ""
  # CodeStarConnectionArn and FeatureGitBranch are required for pipelines for feature branches
  CodeStarConnectionArn:
    Type: String
    Default: ""
  FeatureGitBranch:
    Type: String
    Default: ""
  IntegrationUser:
    NoEcho: true
    Type: String
    MinLength: 1
    Description: Enter Bitbucket or GitHub API username
  IntegrationPass:
    NoEcho: true
    Type: String
    MinLength: 1
    Description: Enter Bitbucket or GitHub API password

Conditions:
  IsMainBranchPipeline: !Equals [!Ref FeatureGitBranch, ""]
  IsFeatureBranchPipeline: !Not [Condition: IsMainBranchPipeline]
  CreateConnection: !Equals [!Ref CodeStarConnectionArn, ""]

Resources:
  #   ____
  # / ___|  ___  _   _ _ __ ___ ___
  # \___ \ / _ \| | | | '__/ __/ _ \
  #   ___) | (_) | |_| | | | (_|  __/
  # |____/ \___/ \__,_|_|  \___\___|
  CodeStarConnection:
    Condition: CreateConnection
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: GitRepositoryConnection
      ProviderType: !Ref GitProviderType

  #  ____  _            _ _
  # |  _ \(_)_ __   ___| (_)_ __   ___
  # | |_) | | '_ \ / _ | | | '_ \ / _ \
  # |  __/| | |_) |  __| | | | | |  __/
  # |_|   |_| .__/ \___|_|_|_| |_|\___|
  #         |_|
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref PipelineArtifactsBucket
        Type: S3
      RoleArn: !GetAtt CodePipelineExecutionRole.Arn
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCodeRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn:
                  !If [
                    CreateConnection,
                    !Ref CodeStarConnection,
                    !Ref CodeStarConnectionArn,
                  ]
                FullRepositoryId: !Ref FullRepositoryId
                BranchName:
                  !If [
                    IsFeatureBranchPipeline,
                    !Ref FeatureGitBranch,
                    !Ref MainGitBranch,
                  ]
                DetectChanges: "No"
              OutputArtifacts:
                - Name: SourceCodeAsZip
              RunOrder: 1
        - Name: UpdatePipeline
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt PipelineStackCloudFormationExecutionRole.Arn
                StackName: !Ref AWS::StackName
                ChangeSetName: !Sub ${AWS::StackName}-ChangeSet
                TemplatePath: SourceCodeAsZip::cloudformation/resources/ci_pipeline.yaml
                Capabilities: CAPABILITY_NAMED_IAM
                ParameterOverrides: !Sub |
                  {
                    "FeatureGitBranch": "${FeatureGitBranch}",
                    "CodeStarConnectionArn": "${CodeStarConnectionArn}",
                    "ProdArtifactBucket": "${ProdArtifactBucket}",
                    "ProdCloudFormationExecutionExeRole": "${ProdCloudFormationExecutionExeRole}",
                    "ProdPipelineExecutionRole": "${ProdPipelineExecutionRole}",
                    "ProdStackName": "${ProdStackName}",
                    "TestingArtifactBucket": "${TestingArtifactBucket}",
                    "TestingCloudFormationExecutionRole": "${TestingCloudFormationExecutionRole}",
                    "TestingPipelineExecutionRole": "${TestingPipelineExecutionRole}",
                    "TestingStackName": "${TestingStackName}",
                    "IntegrationUser": "${IntegrationUser}",
                    "IntegrationPass": "${IntegrationPass}"
                  }
              InputArtifacts:
                - Name: SourceCodeAsZip
              RunOrder: 1
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                RoleArn: !GetAtt PipelineStackCloudFormationExecutionRole.Arn
                StackName: !Ref AWS::StackName
                ChangeSetName: !Sub ${AWS::StackName}-ChangeSet
              OutputArtifacts:
                - Name: !Sub ${AWS::StackName}ChangeSet
              RunOrder: 2

        # Uncomment and modify the following step for running the unit-tests
        - Name: UnitTest
          Actions:
            - Name: UnitTest
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProjectUnitTest
              InputArtifacts:
                - Name: SourceCodeAsZip

        - !If
          - IsFeatureBranchPipeline
          - Name: BuildAndDeployFeatureStack
            Actions:
              - Name: CodeBuild
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: "1"
                Configuration:
                  ProjectName: !Ref CodeBuildProjectBuildAndDeployFeature
                InputArtifacts:
                  - Name: SourceCodeAsZip
          - !Ref AWS::NoValue

        - !If
          - IsMainBranchPipeline
          - Name: BuildAndPackage
            Actions:
              - Name: CodeBuild
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: "1"
                Configuration:
                  ProjectName: !Ref CodeBuildProjectBuildAndPackage
                InputArtifacts:
                  - Name: SourceCodeAsZip
                OutputArtifacts:
                  - Name: BuildArtifactAsZip
          - !Ref AWS::NoValue

        - !If
          - IsMainBranchPipeline
          - Name: DeployTest
            Actions:
              - Name: DeployTest
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: "1"
                Configuration:
                  ProjectName: !Ref CodeBuildProjectDeploy
                  EnvironmentVariables: !Sub |
                    [
                      {"name": "ENV_TEMPLATE", "value": "packaged-test.yaml"},
                      {"name": "ENV_REGION", "value": "${TestingRegion}"},
                      {"name": "ENV_STACK_NAME", "value": "${TestingStackName}"},
                      {"name": "ENV_PIPELINE_EXECUTION_ROLE", "value": "${TestingPipelineExecutionRole}"},
                      {"name": "ENV_CLOUDFORMATION_EXECUTION_ROLE", "value": "${TestingCloudFormationExecutionRole}"},
                      {"name": "ENV_BUCKET", "value": "${TestingArtifactBucket}"},
                      {"name": "ENV_IMAGE_REPOSITORY", "value": "${TestingImageRepository}"}
                    ]
                InputArtifacts:
                  - Name: BuildArtifactAsZip
                RunOrder: 1
          - !Ref AWS::NoValue

        # Uncomment the following step for running the integration tests
        - Name: RunDevIntegrationTests
          Actions:
            - Name: IntegrationTest
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProjectIntegrationTest
                EnvironmentVariables: !Sub |
                  [
                    {"name": "ENV_STACK_NAME", "value": "${FeatureGitBranch}"},
                    {"name": "ENV_PIPELINE_EXECUTION_ROLE", "value": "${TestingPipelineExecutionRole}"}
                  ]
              InputArtifacts:
                - Name: SourceCodeAsZip

        - !If
          - IsMainBranchPipeline
          - Name: DeployProd
            Actions:
              # uncomment this to have a manual approval step before deployment to production
              # - Name: ManualApproval
              #   ActionTypeId:
              #    Category: Approval
              #    Owner: AWS
              #    Provider: Manual
              #    Version: "1"
              #   RunOrder: 1
              - Name: DeployProd
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: "1"
                RunOrder: 2 # keeping run order as 2 in case manual approval is enabled
                Configuration:
                  ProjectName: !Ref CodeBuildProjectDeploy
                  EnvironmentVariables: !Sub |
                    [
                      {"name": "ENV_TEMPLATE", "value": "packaged-prod.yaml"},
                      {"name": "ENV_REGION", "value": "${ProdRegion}"},
                      {"name": "ENV_STACK_NAME", "value": "${ProdStackName}"},
                      {"name": "ENV_PIPELINE_EXECUTION_ROLE", "value": "${ProdPipelineExecutionRole}"},
                      {"name": "ENV_CLOUDFORMATION_EXECUTION_ROLE", "value": "${ProdCloudFormationExecutionExeRole}"},
                      {"name": "ENV_BUCKET", "value": "${ProdArtifactBucket}"},
                      {"name": "ENV_IMAGE_REPOSITORY", "value": "${ProdImageRepository}"}
                    ]
                InputArtifacts:
                  - Name: BuildArtifactAsZip
          - !Ref AWS::NoValue

  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref PipelineArtifactsLoggingBucket
        LogFilePrefix: "artifacts-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  PipelineArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PipelineArtifactsBucket
      PolicyDocument:
        Statement:
          - Effect: "Deny"
            Action: "s3:*"
            Principal: "*"
            Resource:
              - !Sub "${PipelineArtifactsBucket.Arn}/*"
              - !GetAtt PipelineArtifactsBucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
          - Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${PipelineArtifactsBucket}
              - !Sub arn:${AWS::Partition}:s3:::${PipelineArtifactsBucket}/*
            Principal:
              AWS:
                - !GetAtt CodePipelineExecutionRole.Arn

  PipelineArtifactsLoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: "LogDeliveryWrite"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  PipelineArtifactsLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PipelineArtifactsLoggingBucket
      PolicyDocument:
        Statement:
          - Effect: "Deny"
            Action: "s3:*"
            Principal: "*"
            Resource:
              - !Sub "${PipelineArtifactsLoggingBucket.Arn}/*"
              - !GetAtt PipelineArtifactsLoggingBucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: false

  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: "*"
        - PolicyName: CodeStarConnectionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codestar-connections:UseConnection"
                Resource:
                  !If [
                    CreateConnection,
                    !Ref CodeStarConnection,
                    !Ref CodeStarConnectionArn,
                  ]
        - PolicyName: CodePipelineCodeAndS3Bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Effect: Allow
                Resource:
                  Fn::GetAtt:
                    - PipelineArtifactsBucket
                    - Arn
              - Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Effect: Allow
                Resource:
                  Fn::Sub: ${PipelineArtifactsBucket.Arn}/*

        - PolicyName: CodePipelineCodeBuildAndCloudformationAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  # Uncomment the line below to enable the unit-tests
                  - !GetAtt CodeBuildProjectUnitTest.Arn
                  - !GetAtt CodeBuildProjectIntegrationTest.Arn
                  - !If
                    - IsFeatureBranchPipeline
                    - !GetAtt CodeBuildProjectBuildAndDeployFeature.Arn
                    - !Ref AWS::NoValue
                  - !If
                    - IsMainBranchPipeline
                    - !GetAtt CodeBuildProjectBuildAndPackage.Arn
                    - !Ref AWS::NoValue
                  - !If
                    - IsMainBranchPipeline
                    - !GetAtt CodeBuildProjectDeploy.Arn
                    - !Ref AWS::NoValue
              - Effect: Allow
                Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:ValidateTemplate"
                Resource:
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"

  # PipelineStackCloudFormationExecutionRole is used for the pipeline to self mutate
  PipelineStackCloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action: "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
      Policies:
        - PolicyName: GrantCloudFormationFullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  #   ____          _      ____        _ _     _
  #  / ___|___   __| | ___| __ ) _   _(_| | __| |
  # | |   / _ \ / _` |/ _ |  _ \| | | | | |/ _` |
  # | |__| (_) | (_| |  __| |_) | |_| | | | (_| |
  #  \____\___/ \__,_|\___|____/ \__,_|_|_|\__,_|
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Role
          Value: aws-sam-pipeline-codebuild-service-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
        - PolicyName: CodeBuildArtifactsBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${PipelineArtifactsBucket}/*"
        - PolicyName: CodeBuildReportGroup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:BatchPutTestCases"
                  - "codebuild:UpdateReport"
                Resource: "*"
        - PolicyName: AssumeStagePipExecutionRoles
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - sts:AssumeRole
                Effect: Allow
                Resource: "*"
                Condition:
                  StringEquals:
                    aws:ResourceTag/Role: pipeline-execution-role

  CodeBuildProjectUnitTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec_unit_test.yml

  CodeBuildProjectBuildAndDeployFeature:
    Condition: IsFeatureBranchPipeline
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: SAM_TEMPLATE
            Value: !Ref SamTemplate
          - Name: TESTING_REGION
            Value: !Ref TestingRegion
          - Name: TESTING_PIPELINE_EXECUTION_ROLE
            Value: !Ref TestingPipelineExecutionRole
          - Name: TESTING_CLOUDFORMATION_EXECUTION_ROLE
            Value: !Ref TestingCloudFormationExecutionRole
          - Name: TESTING_ARTIFACT_BUCKET
            Value: !Ref TestingArtifactBucket
          - Name: TESTING_IMAGE_REPOSITORY
            Value: !Ref TestingImageRepository
          - Name: FEATURE_BRANCH_NAME
            Value: !Ref FeatureGitBranch
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec_feature.yml

  CodeBuildProjectBuildAndPackage:
    Condition: IsMainBranchPipeline
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: SAM_TEMPLATE
            Value: !Ref SamTemplate
          - Name: TESTING_REGION
            Value: !Ref TestingRegion
          - Name: PROD_REGION
            Value: !Ref ProdRegion
          - Name: TESTING_PIPELINE_EXECUTION_ROLE
            Value: !Ref TestingPipelineExecutionRole
          - Name: PROD_PIPELINE_EXECUTION_ROLE
            Value: !Ref ProdPipelineExecutionRole
          - Name: TESTING_ARTIFACT_BUCKET
            Value: !Ref TestingArtifactBucket
          - Name: PROD_ARTIFACT_BUCKET
            Value: !Ref ProdArtifactBucket
          - Name: TESTING_IMAGE_REPOSITORY
            Value: !Ref TestingImageRepository
          - Name: PROD_IMAGE_REPOSITORY
            Value: !Ref ProdImageRepository
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec_build_package.yml

  CodeBuildProjectIntegrationTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec_integration_test.yml

  CodeBuildProjectDeploy:
    Condition: IsMainBranchPipeline
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec_deploy.yml

  # lambda to notify github

  PipelineNotificationSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt PipelineNotificationFunction.Arn
          Protocol: "lambda"

  PipelineNotificationSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: SnsTopicPolicy
            Effect: Allow
            Principal:
              Service: "codestar-notifications.amazonaws.com"
            Action:
              - sns:Publish
            Resource: !Ref PipelineNotificationSNSTopic
      Topics:
        - !Ref PipelineNotificationSNSTopic

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - codepipeline:GetPipelineExecution
                Resource: arn:aws:codepipeline:*:*:*

  PipelineNotificationRule:
    Type: "AWS::CodeStarNotifications::NotificationRule"
    Properties:
      Name: !Sub "Notification for ${Pipeline}"
      DetailType: FULL
      Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}"
      EventTypeIds:
        - codepipeline-pipeline-pipeline-execution-failed
        - codepipeline-pipeline-pipeline-execution-canceled
        - codepipeline-pipeline-pipeline-execution-started
        - codepipeline-pipeline-pipeline-execution-resumed
        - codepipeline-pipeline-pipeline-execution-succeeded
        - codepipeline-pipeline-pipeline-execution-superseded
      Targets:
        - TargetType: SNS
          TargetAddress: !Ref PipelineNotificationSNSTopic

  SnsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PipelineNotificationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref PipelineNotificationSNSTopic

  PipelineNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          INTEGRATION_AUTH_USER: !Ref IntegrationUser
          INTEGRATION_AUTH_PASS: !Ref IntegrationPass
          INTEGRATION_TYPE: !Ref GitProviderType

      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import boto3
          import os
          import urllib3
          from base64 import b64encode
          codepipeline_client = boto3.client('codepipeline')
          integration_user = os.environ['INTEGRATION_AUTH_USER']
          integration_pass = os.environ['INTEGRATION_AUTH_PASS']
          integration_type = os.environ['INTEGRATION_TYPE']
          user_pass = integration_user+":"+integration_pass
          region = os.environ['AWS_REGION']
          def lambda_handler(event, context):
            message = event['Records'][0]['Sns']['Message']
            data = json.loads(message)
            print (data)
            #Push only notifications about Pipeline Execution State Changes
            if data.get("detailType") != "CodePipeline Pipeline Execution State Change":
              return()
            response = codepipeline_client.get_pipeline_execution(
              pipelineName=data['detail']['pipeline'],
              pipelineExecutionId=data['detail']['execution-id']
            )
            print(response)
            short_commit_od = response['pipelineExecution']['artifactRevisions'][0]['revisionId'][0:7]
            commit_id = response['pipelineExecution']['artifactRevisions'][0]['revisionId']
            revision_url = response['pipelineExecution']['artifactRevisions'][0]['revisionUrl']
            if "FullRepositoryId=" in revision_url:
              repo_id = revision_url.split("FullRepositoryId=")[1].split("&")[0]
            else: #gitbub v1 integration
              repo_id = revision_url.split("/")[3] + "/" + revision_url.split("/")[4]
            if integration_type == "Bitbucket":
              #Based on https://developer.atlassian.com/server/bitbucket/how-tos/updating-build-status-for-commits/
              if data['detail']['state'].upper() in [ "SUCCEEDED" ]:
                state = "SUCCESSFUL"
              elif data['detail']['state'].upper() in [ "STARTED", "STOPPING", "STOPPED", "SUPERSEDED" ]:
                state = "INPROGRESS"
              else:
                state = "FAILED"
              url = "https://api.bitbucket.org/2.0/repositories/" + repo_id + "/commit/" + commit_id + "/statuses/build"
              build_status={}
              build_status['key'] = data['detail']['execution-id']
              build_status['state'] = state
              build_status['name'] = "CodePipeline: " + data['detail']['pipeline']
              build_status['url'] = "https://" + region + ".console.aws.amazon.com/codesuite/codepipeline/pipelines/" + data['detail']['pipeline'] + "/executions/" + data['detail']['execution-id'] + "?region="+region
            elif integration_type == "GitHub":
              #Based on https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#statuses
              if data['detail']['state'].upper() in [ "SUCCEEDED" ]:
                state = "success"
              elif data['detail']['state'].upper() in [ "STARTED", "STOPPING", "STOPPED", "SUPERSEDED" ]:
                state = "pending"
              else:
                state = "error"
              url = "https://api.github.com/repos/" + repo_id + "/statuses/" + commit_id
              build_status={}
              build_status['state'] = state
              build_status['context'] = "CodePipeline"
              build_status['description'] = data['detail']['pipeline']
              build_status['target_url'] = "https://" + region + ".console.aws.amazon.com/codesuite/codepipeline/pipelines/" + data['detail']['pipeline'] + "/executions/" + data['detail']['execution-id'] + "?region="+region
            else:
              return()
            encode_user_pass = b64encode(user_pass.encode()).decode()
            http = urllib3.PoolManager()
            r = http.request('POST', url,
            headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'User-Agent': 'Curl/0.1', 'Authorization' : 'Basic %s' %  encode_user_pass},
            body=json.dumps(build_status).encode('utf-8')
            )
            print(r.data)
            return message

Outputs:
  CodeStarConnectionArn:
    Condition: CreateConnection
    Description: The Arn of AWS CodeStar Connection used to connect to external code repositories.
    Value: !Ref CodeStarConnection
  CodePipelineName:
    Description: The Name of code pipeline.
    Value: !Ref Pipeline
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "Pipeline"]]
